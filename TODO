0.1
---

compress: should only compress user data, we will add a bit in the data
          header to indicate if the pckt is compressed or not (save time).
          this approach allow runtime change of compress.
          open questions are: methods? level? zlib? lzo? bz? lzma? xz?
                              how much do we save by compressin our header?

cryto:    expand API to support dual key for rekey process

compress must happen before encrypt

fix libtap init when creating a new interface live (flags issues in libtap)

consider adding dhcp support for tap device

need bind to interface for dynamic ip local interfaces vs src ip address or
find a way to autodetect the new ip on that interface

fix case where knetd restart is faster than link timeout, leads to packet loss due to
cbuf counters not being cleared fast enough.

CLI timeout configurable

Implement link auth via user/passwd

general:
add log to vty:
 - config (per subsystem/total)
 - output to vty
  log to vty: cmd execution failure

* consider splitting tests/* based on what they test (tap_test -> libtap/) ?

vty:

* split cmd_files
* fix check_param for ip/prefix/crypto

* add description commands for various levels

0.2
---

libtap:

* add man pages
* improve tests to cover thread safety and more error codes

0.3
---

* benchmark tests:
  - all critical paths in ring.c

0.4
---

general:

* add statistics
* add spec file

vty:

* add optional options
* tab completion on options

0.5
---

* pong count
* implement link switching via scoring system
- latency
- priority (auto/manual)
- usage (over XX% traffic start RR)
- flapping of the links (time/sec)


0.7
---

* review ring api for libknetring shared lib
* review tap api for libknettap shared lib
* review vty api for libknetvty shared lib

1.0-pre
-------

tests:

* coverity
* unit test:
  - test all public APIs
  - write ad-doc tests for internal complex functions
  - not required to test return codes from external libs directly
    (we are not testing glibc)
  - test all code paths we write
  - no 0.9/1.0 release without max testing coverage for the core
