0.1
---

debian packaging (mostly resync from rpm packaging):
 - (sync)  Check policy on /etc/pam.d/* install/usage
 - (sync)  Make groupadd kronosnetadm silent and dynamic
 - (sync)  systemd packaging in debian?
 - (sync)  install /etc/default/kronosnetd

rpm packaging:
 - (issue) check why systemd doesn't let me set scheduler priority

link/host level:
 - (issue) implement packet fragmentation via IP_MTU_DISCOVER/IP_MTU, is the only
           solution to avoid conflicts with tun/tap mtu setting and various
           others buffer sizes.
 - (issue) sort out read buf from recv_from_links since it might be too small vs
           sending out 128k (+header+encryption+....). this is also related
           to max PMTU
 - (rfe)   compress: should only compress user data, we will add a bit in the data
                     header to indicate if the pckt is compressed or not (save time).
                     this approach allow runtime change of compress.
                     open questions are: methods? level? zlib? lzo? bz? lzma? xz?
                                        how much do we save by compressin our header?
           compress must happen before encrypt

           we can express compress data in packet type without adding extra
           flags to the headers. DATA -> BZ/GZDATA and we can change that
           right before encrypting. Using a similar approach to PING_MASK
 - (rfe)   crypto: expand API to support dual key for rekey process
 - (issue) crypto: we need to port again "crypto header size" from corosync
                   necessary for MTU handling

review locking handling policies (attempt locks vs deadlocks and so on)

consider adding dhcp support for tap device

need bind to interface for dynamic ip local interfaces vs src ip address or
find a way to autodetect the new ip on that interface
(listen to kernel netlink?)

Check IPV6_NEXTHOP for v6 sockets and find equivalent for v4 (Jesper?)

Implement link auth via user/passwd

general:
add log to vty:
 - config (per subsystem/total)
 - output to vty
  log to vty: cmd execution failure

vty:

* split cmd_files
* fix check_param for ip/prefix/crypto

* add description commands for various levels

0.2
---

libtap:

* add man pages
* improve tests to cover thread safety and more error codes

0.3
---

* benchmark tests:
  - all critical paths in ring.c

0.4
---

general:

* add statistics

vty:

* add optional options
* tab completion on options

0.5
---

* pong count
* implement link switching via scoring system
- latency
- priority (auto/manual)
- usage (over XX% traffic start RR)
- flapping of the links (time/sec)


0.7
---

* review ring api for libknet shared lib
* review tap api for libtap shared lib

1.0-pre
-------

tests:

* coverity
* unit test:
  - test all public APIs
  - write ad-doc tests for internal complex functions
  - not required to test return codes from external libs directly
    (we are not testing glibc)
  - test all code paths we write
  - no 0.9/1.0 release without max testing coverage for the core
